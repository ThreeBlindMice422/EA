*--------------------------------------------------------------------
*               D2 holds source data
*               D3 holds dest data
*               D5 currently holds mode
*               D6 currently holds register
*               A3 points to reg table
*               A2 points to buffer
*               A5 points to starting address
*               A6 points to hex table
*               MOVEM (mode 101) doesn't work
*--------------------------------------------------------------------
                ORG    $1000
START:
               
sourceData      EQU     %101000         *mode, register
destData        EQU     %100001         *mode, register
START_ADDR      EQU     $7002

                LEA     START_ADDR,A5   *A5 points to starting address      
                LEA     buffer,A2       *A2 is buffer
                
*------------------------- Source Data ------------------------------
                CLR.L   D2
                MOVE.B  #sourceData,EA_SOURCE *Put example source data into variable EA_SOURCE
                MOVE.B  EA_SOURCE,D2    *copy source data to d2
                
                *********** Mode **********
                CLR.L   D5
                MOVE.W  D2,D5
                
                LSR.W   #3,D5           *Shift 3 bits to the right to get rid of register #
                                        *3-bit mode# is now in D5   
                
                ********** Register ********
                CLR.L   D6
                MOVE.W  D2,D6
                
                LSL.W   #8,D6           *Shift to the left to get register # separate from mode
                LSL.W   #5,D6
                
                LSR.L   #8,D6           *Shift back to the right to get register number
                LSR.L   #5,D6
                                        *3-bit register# is now in D6
                                        
                MOVE.B  #1,EAcounter      *Start EAcounter at 1 for first loop
                
                BRA     mode_table
               
                
*------------------------ Destination Data --------------------------

dest            MOVE.B  #',',(A2)+
                MOVE.B  #' ',(A2)+
                
                ADDQ.B  #2, buffer_counter
                
                CLR.L   D3
                MOVE.B  #destData,EA_DEST *Put example source data into variable EA_SOURCE
                MOVE.B  EA_DEST,D3    *copy source data to d2
                
                *********** Mode **********
                CLR.L   D5
                MOVE.W  D3,D5
                
                LSR.W   #3, D5          *Shift 3 bits to the right to get rid of register #
                                        *3-bit mode# is now in D5   
                
                ********** Register ********
                CLR.L   D6
                MOVE.W  D3,D6
                
                LSL.W   #8,D6           *Shift to the left to get register # separate from mode
                LSL.W   #5,D6
                
                LSR.L   #8,D6           *Shift back to the right to get register number
                LSR.L   #5,D6
                                        *3-bit register# is now in D6
                
                ADDQ.B  #1,EAcounter    *Add 1 to EAcounter to represent second loop
                
                BRA     mode_table
                
*-------------------- Addressing Mode Table ----------------------------
mode_table      CMP.W   #%000,D5    *Data Register - Dn
                BEQ     mode000
                CMP.W   #%001,D5    *Address Register - An
                BEQ     mode001
                CMP.W   #%010,D5    *Indirect Address Register - (An)
                BEQ     mode010
                CMP.W   #%011,D5    *Address Post Increment - (An)
                BEQ     mode011
                CMP.W   #%100,D5    *Address Pre Decrement - -(An)
                BEQ     mode100
                CMP.W   #%101,D5    *We will use this for MOVEM since (D16,An) is not a required EA
                BEQ     mode101
                CMP.W   #%111,D5    *(xxx).W, (xxx).L, #<data>
                BEQ     mode111
                
                BNE     error       *Error Mode
                
mode000         MOVE.B  #'D',(A2)+
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D6
                JSR     0(A3,D6)        *Print number
                             
                ADDQ.B  #2, buffer_counter
                
                BRA     checkCounter
                
mode001         MOVE.B  #'A',(A2)+
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D6
                JSR     0(A3,D6)        *Print number
                             
                ADDQ.B  #2, buffer_counter
                
                BRA     checkCounter
                             
mode010         MOVE.B  #'(',(A2)+
                MOVE.B  #'A',(A2)+
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D6
                JSR     0(A3,D6)        *Print number
                        
                MOVE.B  #')',(A2)+
                
                ADDQ.B  #4, buffer_counter
                
                BRA     checkCounter
                                              
mode011         MOVE.B  #'(',(A2)+
                MOVE.B  #'A',(A2)+
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D6
                JSR     0(A3,D6)        *Print number
                             
                MOVE.B  #')',(A2)+
                MOVE.B  #'+',(A2)+
                
                ADDQ.B  #5, buffer_counter
                
                BRA     checkCounter
                             
mode100         MOVE.B  #'-',(A2)+
                MOVE.B  #'(',(A2)+
                MOVE.B  #'A',(A2)+
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D6
                JSR     0(A3,D6)        *Print number
                
                MOVE.B  #')',(A2)+
                
                ADDQ.B  #5, buffer_counter
                
                BRA     checkCounter 
         
mode101         ************************* MOVEM *************************

                ********* (00)00 = first byte ********
MOVEMData       CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                LSR.W   #8,D4       *Isolate first byte (Data registers)
                
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                
                CMP.W   #0,D7       *Are there any data registers?
                BNE     MOVEMAdd    *If not, check if there are address registers
                
                MOVE.B  #'D',(A2)+
                
                *Isolate first bit
                LSR.W   #7,D7
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D7
                JSR     0(A3,D7)        *Print number
                
                
                ********* 00(00) = second byte ********
MOVEMAdd        CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                LSL.W   #8,D4
                LSR.W   #8,D4       *Isolate second byte (Address registers)
                
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7

                CMP.W   #0,D7       *Are there any address registers?
                BEQ     checkCounter *Go to ending
                
                MOVE.B  #'A',(A2)+  

                *Isolate first bit
                LSR.W   #7,D7
                
                LEA     reg_table,A3    *Load jump table for reg_table
                MULU    #6,D7
                JSR     0(A3,D4)        *Print number

                BRA     done  
                
mode111         BRA     abs_table  
                
                
*---------------------------- Register Mode Table ----------------------------------
reg_table       JMP     reg000          *0
                JMP     reg001          *1
                JMP     reg010          *2
                JMP     reg011          *3
                JMP     reg100          *4
                JMP     reg101          *5
                JMP     reg110          *6
                JMP     reg111          *7
                
reg000          MOVE.B  #'0',(A2)+
                RTS
                
reg001          MOVE.B  #'1',(A2)+
                RTS
                
reg010          MOVE.B  #'2',(A2)+
                RTS
                
reg011          MOVE.B  #'3',(A2)+
                RTS
                
reg100          MOVE.B  #'4',(A2)+
                RTS
                
reg101          MOVE.B  #'5',(A2)+
                RTS
                
reg110          MOVE.B  #'6',(A2)+
                RTS
                
reg111          MOVE.B  #'7',(A2)+
                RTS
                
*------------------- Absolute/ Immediate Register Mode Table -----------------------
abs_table       CMP.W   #0,D6
                BEQ     abs000      *(xxx).W    *Size has to be W= two bytes
                CMP.W   #1,D6
                BEQ     abs001      *(xxx).L    *Size has to be L = four bytes
                CMP.W   #4,D6
                BEQ     abs100      *#<data>    *Size can be B,W,L
                CMP.W   #7,D6           
                BEQ     abs111      *We will use this when there is only a destination for an opcode
                
                BNE     error
                
abs000          MOVE.B  #'$',(A2)+ 

                CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                ************ (0)000 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the first four bits
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)    *Jump to hex table to get value of first digit
                
                ************ 0(0)00 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #4,D7       *Shift 4 bits to the left to get rid of first digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the second digit
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)    *Jump to hex table to get value of second digit
                
                ************ 00(0)0 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7       *Shift 8 bits to the left to get rid of first and second digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the third digit
                                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)    *Jump to hex table to get value of third digit
                
                ************ 000(0) **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7
                LSL.W   #4,D7       *Shift 12 bits to the left to get rid of beginning digits
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift 12 bits to the right to isolate the last digit
                                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)    *Jump to hex table to get value of last digit
                
                ADDQ.B  #5, buffer_counter
                
                BRA     checkCounter

abs001          MOVE.B #'$',(A2)+  
 
                *FIRST WORD OF LONG
                CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                ************ (0)000 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the first four bits
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)    
                
                ************ 0(0)00 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #4,D7       *Shift 4 bits to the left to get rid of first digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the second digit
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)     
                
                ************ 00(0)0 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7       *Shift 8 bits to the left to get rid of first and second digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the third digit
                                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)  
                
                ************ 000(0) **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7
                LSL.W   #4,D7       *Shift 12 bits to the left to get rid of beginning digits
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift 12 bits to the right to isolate the last digit
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)
                
                *SECOND WORD OF LONG
                
                CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                ************ (0)000 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the first four bits
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7) 
                
                ************ 0(0)00 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #4,D7       *Shift 4 bits to the left to get rid of first digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the second digit
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)      
                
                ************ 00(0)0 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7       *Shift 8 bits to the left to get rid of first and second digit
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift a total of 12 bits to the right to isolate the third digit
                                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)  
                
                ************ 000(0) **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7
                LSL.W   #4,D7       *Shift 12 bits to the left to get rid of beginning digits
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Shift 12 bits to the right to isolate the last digit
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7) 
                
                ADDQ.B  #8, buffer_counter
                ADDQ.B  #1, buffer_counter
                
                BRA     checkCounter

abs100          MOVE.B #'#',(A2)+  
                
                ********* #<Byte> = 0000 *********
                CMP.W   #%0000,Immediate_s
                ADDQ.B  #1, buffer_counter
                BEQ     byteData
                
                ********* #<Word> = 0001 *********
                CMP.W   #%0001,Immediate_s
                ADDQ.B  #1, buffer_counter
                BEQ     wordData
                
                ********* #<Long> = 0010 *********
                CMP.W   #%0010,Immediate_s
                ADDQ.B  #1, buffer_counter
                BEQ     longData
                
byteData        MOVE.B #'$',(A2)+  
                CLR.L   D4
                MOVE.W (A5)+,D4     *Read in word data from starting address pointer into D4
                
                ************** (0)0 **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7       *Get rid of beginning 00
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Get first number of byte all the way to the right
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)
                
                ************** 0(0) **************
                CLR.L   D7
                MOVE.W  D4,D7       *Copy data from D4 into D7
                LSL.W   #8,D7
                LSL.W   #4,D7       *Get rid of beginning numbers
                LSR.W   #8,D7       
                LSR.W   #4,D7       *Get second number of byte all the way to the right
                
                MULU.W  #6,D7       
                LEA     hex_table,A6 
                JSR     0(A6,D7)
                
                ADDQ.B    #3, buffer_counter
                
                BRA     checkCounter
                
wordData        BRA     abs000
                
longData        BRA     abs001

abs111          BRA     checkCounter
            
*------------------------------ Hex Numbers ---------------------------------
hex_table       JMP     num0          *0
                JMP     num1          *1
                JMP     num2          *2
                JMP     num3          *3
                JMP     num4          *4
                JMP     num5          *5
                JMP     num6          *6
                JMP     num7          *7
                JMP     num0          *8
                JMP     num9          *9
                JMP     numA          *A
                JMP     numB          *B
                JMP     numC          *C
                JMP     numD          *D
                JMP     numE          *E
                JMP     numF          *F
                
num0            MOVE.B  #'0',(A2)+
                RTS
                
num1            MOVE.B  #'1',(A2)+                
                RTS
                
num2            MOVE.B  #'2',(A2)+                
                RTS
                
num3            MOVE.B  #'3',(A2)+               
                RTS
                
num4            MOVE.B  #'4',(A2)+                
                RTS

num5            MOVE.B  #'5',(A2)+
                RTS

num6            MOVE.B  #'6',(A2)+
                RTS
            
num7            MOVE.B  #'7',(A2)+
                RTS
                
num8            MOVE.B  #'8',(A2)+
                RTS
                
num9            MOVE.B  #'9',(A2)+
                RTS
                
numA            MOVE.B  #'A',(A2)+
                RTS
                
numB            MOVE.B  #'B',(A2)+
                RTS
                
numC            MOVE.B  #'C',(A2)+
                RTS

numD            MOVE.B  #'D',(A2)+
                RTS

numE            MOVE.B  #'E',(A2)+
                RTS
            
numF            MOVE.B  #'F',(A2)+
                RTS
  
*------------------------------- Print Buffer -----------------------------
checkCounter    CMP.B   #2,EAcounter    *If you have already checked source and destination, EAcounter=2
                BEQ     done            *Branch to print out data in the buffer

                BRA     dest            *If EAcounter=1, branch back to dest

done            MOVE.B  #$0D,(A2)+
                MOVE.B  #$0A,(A2)+      *New line after destination is printed
                MOVE.B  #$00,(A2)       *Add 00 to buffer, so it knows when to end
                LEA     buffer,A1       *Buffer will hold both source and destination info
                MOVE.B  #14 ,D0
                TRAP    #15 
                
                MOVE.B  #9,D0
                TRAP    #15             *Halt simulator

*--------------------------------- Error Case --------------------------------
error           MOVE.B #'E',(A2)+
                MOVE.B #'R',(A2)+
                MOVE.B #'R',(A2)+
                MOVE.B #'O',(A2)+
                MOVE.B #'R',(A2)+
                
                ADDQ.B #5, buffer_counter
                
                BRA    done


EA_SOURCE       DS.B    1    
EA_DEST         DS.B    1    
buffer          DS.B    80       
EAcounter       DS.B    1               *Holds 1 to begin with
Immediate_s     DS.B    1               *byte=%0000   word=%0001   long=%0010
buffer_counter  DS.B    1    


                END    START        

